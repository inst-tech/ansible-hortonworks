---
- set_fact: outer_loop="{{ item }}"

- name: Get AMI information
  ec2_ami_find:
    region: "{{ cloud_config.region }}"
    ami_id: "{{ outer_loop.image }}"
  register: current_ami

- name: Create {{ outer_loop.role }} node(s) (EBS root volume)
  ec2:
    region: "{{ cloud_config.region }}"
    zone: "{{ cloud_config.zone }}"
    image: "{{ outer_loop.image }}"
    instance_type: "{{ outer_loop.type }}"
    vpc_subnet_id: "{{ cloud_config.subnet_id }}"
    groups: "{{ outer_loop.security_groups }}"
    assign_public_ip: "{{ outer_loop.public_ip }}"
    key_name: "{{ cloud_config.ssh.keyname }}"
    exact_count: "{{ outer_loop.count }}"
    volumes:
      - device_name: "{{ current_ami['results'][0]['root_device_name'] }}"
        volume_type: "{{ outer_loop.root_volume.type }}"
        volume_size: "{{ outer_loop.root_volume.size }}"
        delete_on_termination: true
      - device_name: /dev/xvdb
        ephemeral: ephemeral0
      - device_name: /dev/xvdc
        ephemeral: ephemeral1
      - device_name: /dev/xvdd
        ephemeral: ephemeral2
      - device_name: /dev/xvde
        ephemeral: ephemeral3
    count_tag:
      Group: "{{ cluster_name }}-{{ outer_loop.role }}"
    instance_tags:
      cluster: "{{ cluster_name }}"
      Role: "{{ outer_loop.role }}"
      Group: "{{ cluster_name }}-{{ outer_loop.role }}"
    wait: yes
    wait_timeout: 600
  register: current_ec2
  when: outer_loop.root_volume.ebs

- name: Wait for SSH to start
  wait_for:
    host: "{{ (outer_loop.public_ip|default(false)== true) | ternary(local_loop.public_ip,local_loop.private_ip) }}"
    port: 22
    state: started
    delay: 30
    timeout: 300
  loop_control:
    loop_var: local_loop
  with_items: '{{ current_ec2.instances }}'
